8~ create table cse("Srno."number(2),"Emp_id"varchar(5),"Facname"char(8));
INSERT INTO cse ("Srno.","Emp_id","Facname") 
 VALUES(01,'E1121','MERANAME');
select * from cse


~ select * from cse
where "Emp_id"='E1121';


~ select distinct * from kaushik;


~  select * from kaushik
order by "Name";

~delete from kaushik where "Name"='panchva';


~alter table kaushik
add Email varchar(25);


~update kaushik set Email='chau.gmail.com' where "Name"='chauta';

~alter table kaushik
drop column Email;

~truncate table kaushik;

~create table hello("Emp_id" varchar(20),"Name" char(50),Primary key("Emp_id","Name"));
create table hellow("Emp_id" varchar(20) primary key,"Name" char(50));

~create table world("Emp_id" varchar(20), "Name" char(50), Foreign key("Emp_id") References hellow("Emp_id"));

~desc kaushik;

~create table sbc("emp" varchar2(20) not null,"name" char(50));
insert into sbc("emp","name")values('','abc');

~create table sbc("emp" varchar2(20) unique,"name" char(50));

~drop table bbc;
create table sbc("emp" varchar2(20) primary key,"name" char(50));
insert into sbc("emp","name")values('E12345','asdfgh');
alter table sbc
add email varchar(20);
select * from sbc; 
create table dbc("dept" varchar2(20) primary key,"emp" varchar2(20) references sbc);
insert into dbc("dept","emp")values('D12345','E12345');
create table bbc("item" number(4),"iname" char(20),"emppp" varchar2(20),foreign key("emppp") references sbc("emp") on delete set null);
insert into bbc("item","iname","emppp")values(1235,'namehau','E12345');
//on delete cascade
//on delete set null
create table kuch("emp" varchar(20) primary key,"name" char(50)),
check(emp like 'E%'),
check(name=upper(name));




~create table employeeeee("employee_id" int not null,"last_name" char(50) not null, "first_name" char(50) not null, "salary" number(10,2) );

alter table employeeeee
add constraint ch_employee_id
check("employee_id" between 1 and 100000);

alter table employeeeee
add constraint ch_salary
check("salary">0);

alter table employeeeee
add constraint ch_salary_
check("salary">0 and "salary"<100000);

alter table employeeeee
add constraint ch_lastname
check("last_name" in('sharma','mahajan','goyal'));

alter table employeeeee
drop constraint ch_salary;

select * from employeeeee

~create table empl("Emp_Id" varchar2(10) primary key,"Name" char(50),"City" char(50));
create table dept("Emp_Id" varchar2(10),"Dept_Id" varchar2(10),"Dept" char(50),foreign key("Emp_Id") references empl("Emp_Id") on delete set null); 
insert into empl("Emp_Id","Name","City") values('E0003','third kumar','ghana');
insert into dept("Emp_Id","Dept_Id","Dept") values('E0003','D0003','forest');
select * from empl;
select * from dept;



create table tab1("Emp_Id" varchar2(10),"Name" char(50));
create table tab2("Emp_Id" varchar2(10),"Dept" char(50));
insert into tab1("Emp_Id","Name") values('E0003','third');
insert into tab2("Emp_Id","Dept") values('E0002','goofa');

select tab1."Name",tab2."Dept" from tab1 left join tab2 on tab1."Emp_Id"=tab2."Emp_Id";




~create table worker("w_id" varchar2(10) primary key,"first_name" char(30),"last_name" char(30),"salary" number(12),"joining_date" timestamp,"dept" char(30));
create table bonus("wref_id" varchar2(10),"bonus_date" date,"bonus_amount" number(10),foreign key("wref_id") references worker("w_id"));
insert into worker("w_id","first_name","last_name","salary","joining_date","dept")
  values('W0003','alias','kumar',123123,to_date('02/12/2018 21:20:22','dd/mm/yyyy hh24:mi:ss'),'motor');
insert into bonus("wref_id","bonus_date","bonus_amount")
  values('W0001','08/12/2012',123321);

select * from worker where "first_name"='alias';
select * from worker where lower("first_name")='alias';
select "first_name" from worker;
select * from bonus;
select upper("first_name") from worker;
SELECT SUBSTR("first_name", 1, 3) AS ExtractString
FROM worker;
SELECT COUNT (DISTINCT "dept")
  FROM worker;
select count("w_id") from worker where "dept"='motor';


~create table game("gname" char(20),"fees" number(4),primary key("gname"));
create table stud("rollno" number(10),"name" char(20),primary key("rollno"));
create table conc("rollno" number(10) unique,"gname" char(20),"grade" varchar2(3),Foreign key("rollno") References stud("rollno"),Foreign key("gname") References game("gname"));
insert into game("gname","fees") values('hockey',200);
insert into stud("rollno","name") values(5,'parul');
insert into conc("rollno","gname","grade") values(5,'hockey','A+');
select * from game;
select * from stud;
select * from conc;
create table conc01("rollno" number(10) ,"gname" char(20),"grade" varchar2(3),Foreign key("rollno") References stud("rollno"),Foreign key("gname") References game("gname"),primary key("rollno","gname"));
insert into conc01("rollno","gname","grade") values(1,'cricket','A');



~create view abc as select 
 DEPARTMENT_ID,
 DEPARTMENT_NAME,
 MANAGER_ID,
 LOCATION_ID
 from DEPARTMENTS where DEPARTMENT_ID>50;
select * from abc;

create or replace view ab as select 
 DEPARTMENT_ID,
 DEPARTMENT_NAME,
 MANAGER_ID,
 LOCATION_ID
 from DEPARTMENTS where DEPARTMENT_ID>50;
select * from ab;

drop view abc;

HOW TO CREATE USER
create user username identified by password;

grant privileges on object to users;
revoke privileges on object to users;
















~create view view1 as select empno,ename from emp;
select * from view1;
create or replace view view1 as select empno,ename from emp with read only;

create or replace view view1(id,name) as select empno,ename from emp;

create view view2 as select emp.empno,emp.ename,emp.sal,dept.deptno,dept.dname from emp,dept where dept.deptno=emp.deptno;
select * from view2;
create view view2 as select e.empno,e.ename,e.sal,d.deptno,d.dname from emp e,dept d where d.deptno=e.deptno;



~create view v1 as select empno,ename from emp;
insert into v1(empno,ename) values(220,'hello');
update v1 set ename='hululu' where empno=220;
delete from v1 where empno=220;
select * from v1;

create sequence sq1 start with 50 increment by 1 maxvalue 60 order;
select * from user_sequences;

~create sequence sq2 start with 1 increment by -1 minvalue -10 maxvalue 10 order;
select * from user_sequences;

alter sequence sq2 increment by 1 minvalue -10 maxvalue 20 cache 2 order;

select * from dual;//one row on coloumn
select sq1.currval from dual;
select sq1.nextval from dual;

insert into emp(empno,ename,sal) values(sq2.nextval,'werty',1000);
insert into emp(empno,ename,sal) values(sq2.nextval,'qwerty',1000);
select * from emp where ename='qwerty';

Q.create a sequence to generate no. from 1 to 9999 in ascending oder with an interval of 2 and the sequence must restart from 1 after reaching 9999;
ANS> create sequence sq3 start with 1 increment by 2 minvalue 1 maxvalue 9999 cycle order;

~create index index_name on table_name(col_name1,col_name2);
create index index1 on emp(empno);
select * from user_indexes;
create unique index index2 on emp(ename);

/*composite index*/
create index index3 on emp(empno,sal);

/*bitmap index only for image*/
create index bitmap on emp(image);

/*create table 
create index on cluster
create table
*/

create cluster cl1(d number(10));
create index cin1 on cluster cl1;
create table deptt1(dno number(10),dname varchar2(20)) cluster cl1(dno);
create table empp1(empno number(20),ename varchar2(20),dno number(10)) cluster cl1(dno);
insert into deptt1(dno,dname) values(100,'cse');
insert into deptt1(dno,dname) values(101,'mech');
insert into empp1(empno,ename,dno) values(001,'first',100);
insert into empp1(empno,ename,dno) values(002,'second',101);
select rowid,dno,dname from deptt1;
select rowid,empno,ename,dno from empp1;

select rowid,dname,deptno from dept;
select rowid,empno,ename,deptno from emp;
select * from dept;

~/*PL SQL*/
Declare
a number(20);
b number(20);
c number(20);
Begin
a:=:a;
b:=:b;
c:=a+b;
dbms_output.put_line('sum is '||c);
end;

/*area of circle*/
Declare
a number(20,2);
c number(20,2);
Begin
a:=:a;
c:=3.14*a*a;
dbms_output.put_line('area is '||c);
end;

/*if else*/
Declare
a number(10);
b number(10);
c number(10);
Begin
a:=:a;
b:=:b;
c:=:c;
if(a>b AND a>c)then
dbms_output.put_line('a is greater');
elsif(b>a AND b>c)then
dbms_output.put_line('b is greater');
else
dbms_output.put_line('c is greater');
end if;
end;

/*case statement*/
Declare
a varchar(10):=:a;
b varchar(10);
Begin
b:=
case
when a='A' then 'excellent'
when a='B' then 'very good'
when a='C' then 'average'
when a='D' then 'poor'
else
'no grade'
end;
dbms_output.put_line('grades is ' || b);
end;

/*iterative control statements*/

/*basic  loop*/
Declare
a number(10):=0;
Begin
loop
a:=a+2;
exit when(a>10);
end loop;
dbms_output.put_line(a);
end;

/*while loop*/
Declare
a number(10):=0;
Begin
while(a<10)
loop
a:=a+2;
end loop;
dbms_output.put_line(a);
end;

/*for loop*/
Declare
a number(10):=0;
Begin
for counter in 1..5
loop
a:=a+2;
end loop;
dbms_output.put_line(a);
end;

/*sequential control statement*/
/* exit and continue*/

/*goto*/
create table old_price("pno" varchar2(10),"date" number(10),"old" number(10));
insert into old_price("pno","date","old")values();
create table product("pno" varchar2(10),"sprice" number(10));
insert into product("pno","sprice")values();

Declare
a number(10);
Begin
select sprice into a from product where pno='p1';
if(a<2000)then
goto old_price;
else
dbms_output.put_line('current price is '||a);
end if;
<<old_price>>
update product set sprice=5000 where pno='p1'


/* wite to check whether a number is armstrong or not*/
/*print fibonacci series*/
/*multiplication of table of number*/
/*palindrom*/
/*to accept the number for user and print it in reverse order*/
/*take string and revese it(length and substr)*/

~/*exception handling*/
Declare 
name emp.ename%type;
Begin
select ename into name from emp where deptno=:deptno;
dbms_output.put_line('ename is '||name);
Exception
when zero_divide then
dbms_output.put_line('ename is zero');
when too_many_rows then
dbms_output.put_line('ename is multiple');
when no_data_found then
dbms_output.put_line('ename is empty');
end;

~Declare
name emp.ename%type;
eno emp.empno%type;
Begin
name:=:name;
eno:=:eno;
insert into emp(empno,ename) values(eno,name);
Exception
when zero_divide then
dbms_output.put_line('ename is zero');
when dup_val_on_index then
dbms_output.put_line('dupliacte');
end;

/*user defined Exception*/
Declare
excep exception;
eno emp.empno%type;
name emp.ename%type;
Begin
eno:=:eno;
name:=:name;
if eno is NULL then
raise excep;
end if;
insert into emp(empno,ename) values(eno,name);
dbms_output.put_line('inserted');
Exception
when excep then
dbms_output.put_line('null nahi dalna');
end;

/*user + predefiend exception*/
Declare
excep exception;
eno emp.empno%type;
name emp.ename%type;
name1 emp.ename%type;
Begin
eno:=:eno;
name:=:name;
if eno is NULL then
raise excep;
end if;
insert into emp(empno,ename) values(eno,name);
dbms_output.put_line('inserted');
select ename into name1 from emp where deptno=:deptno;
Exception
when excep then
dbms_output.put_line('null nahi dalna');
when too_many_rows then
dbms_output.put_line('ename is multiple');
when no_data_found then
dbms_output.put_line('ename is empty');
end;

/*RERAISING exception*/
Declare
sal_too_high exception;
eror_sal number(10);
curr_sal number(10):=20000;
max_sal number(10):=10000;
Begin
Begin
if curr_sal>max_sal then
raise sal_too_high;
end if;
exception
when sal_too_high then
dbms_output.put_line('out of range');
dbms_output.put_line('maxsal');
raise;
end;
exception
when sal_too_high then
eror_sal:=curr_sal;
curr_sal:=max_sal;
dbms_output.put_line('third');
end;

~/*pragma exception_init*/
Declare
deadlock_detected exception;
pragma exception_init(deadlock_detected, -60);
Begin
NULL;
raise deadlock_detected;
Exception
when deadlock_detected then
dbms_output.put_line('pragama exception');
end;


/*CURSORS*/
~Declare
eid emp.empno%type;
name emp.ename%type;
salary emp.sal%type;
cursor cursor1 is select ename,empno,sal from emp;
Begin
open cursor1;
loop
fetch cursor1 into name,eid,salary;
exit when cursor1%notfound;
dbms_output.put_line('eid = '||eid||' name = '||name||' salary = '||salary);
end loop;

delete from emp where empno=500;

close cursor1;
end;


Declare
eid emp.empno%type;
name emp.ename%type;
salary emp.sal%type;
job emp.job%type;
cursor cursor1 is select ename,empno,sal,job from emp;
Begin
open cursor1;
loop
fetch cursor1 into name,eid,salary,job;
exit when cursor1%notfound;
if(job = 'CLERK') then
salary:=salary+(.08*salary);
elsif(job ='SALESMAN')then
salary:=salary+(.05*salary);
end if;
dbms_output.put_line('eid = '||eid||' name = '||name||' salary = '||salary);
end loop;
close cursor1;
end;
select * from emp;


~Declare
salary emp.sal%type;
cursor c1 is select sal from emp where job='MANAGER';
Begin
open c1;
loop
fetch c1 into salary;
exit when c1%notfound;
salary:=salary*1.5;
dbms_output.put_line('salary = '||salary);
end loop;
close c1;
end;
select * from emp;


/*do for loop cursor and passing parameter to cursor on your own(notebook)*/


//subprograms
	/*procedur*/
		/*local*/
declare
a number;
b number;
c number;
d number;
e number;
procedure p1(a number,b in number,c out number,d out number,e out number)
is
begin
c:=a+b;
d:=a-b;
e:=a*b;
end p1;
begin
a:=:a;
b:=:b;
p1(a,b,c,d,e);
dbms_output.put_line('add = '||c||' subtract = '||d||' multiply = '||e);
end;

/*stored procedure*/
declare
a number;
b number;
c number;
d number;
e number;
begin
a:=:a;
b:=:b;
proc1(a,b,c,d,e);
dbms_output.put_line('add '||c);
end;


create or replace
procedure proc1(a number,b in number,c out number,d out number,e out number)
is
begin
c:=a+b;
d:=a-b;
e:=a*b;
end proc1;




/*FUNCTIONS*/

create or replace function F1(emp_no number) return number is
salary number;
Begin
select sal into salary from emp where empno=emp_no;
return salary;
end;

Declare
empno number;
sal number;
Begin
empno:=:empno;
sal:=F1(empno);
dbms_output.put_line('salary is '||sal);
end;

select * from emp;



~Declare
empno number;
sal number;
function F1(emp_no number) return number is
salary number;
Begin
select sal into salary from emp where empno=emp_no;
return salary;
end F1;
Begin
empno:=:empno;
sal:=F1(empno);
dbms_output.put_line('salary is '||sal);
end;


/*PACKAGES*/
create or replace package packname is
procedure displaySquare(a number);
procedure displayCube(a number);
end;

create or replace package body packname is
procedure displaySquare(a number) is
c number;
Begin
c:=a*a;
dbms_output.put_line('square is '||c);
end;
procedure displayCube(a number) is
c number;
Begin
c:=a*a*a;
dbms_output.put_line('cube is '||c);
end;
end;

Declare 
a number;
Begin
a:=:a;
packname.displaySquare(a);
packname.displayCube(a);
end;


~Declare
name emp.ename%type;
cursor cemp is select ename from emp;
Begin
open cemp;
loop
fetch cemp into name;
exit when cemp%notfound;
dbms_output.put_line('name = '||name);
end loop;
dbms_output.put_line(cemp%rowcount);
close cemp;
end;


create or replace package emp_info is
function get_record(a number) return emp%rowtype;
procedure set_record(record emp%rowtype);
end;

create or replace package body emp_info is
function get_record(a number) return emp%rowtype is
result emp%rowtype;
begin
select * into result from emp where empno=a;
return result;
end;
procedure set_record(record in emp%rowtype) is
begin
insert into emp values(record.empno,record.ename,record.job,record.mgr,record.hiredate,record.sal,record.comm,record.deptno);
end;
end;

declare
a number;
record emp%rowtype;
begin
a:=:a;

record.empno:=001;
record.ename:='abcd';
emp_info.set_record(record);

record:=emp_info.get_record(a);

dbms_output.put_line(record.empno|| record.ename);

end;


~create table new_table(empno number,ename char,job char,mgr number,hiredate date,sal number,comm number,deptno number);
create or replace trigger t1
before delete on emp
for each row
Begin
insert into new_table(empno,ename,job,mgr,hiredate,sal,comm,deptno)values(:old.empno,:old.ename,:old.job,:old.mgr,:old.hiredate,:old.sal,:old.comm,:old.deptno);
end;
delete from emp where empno=7839;

create or replace trigger empin12
before insert on emp
for each row
Begin
if :new.sal<2500 then
dbms_output.put_line('sal less than 2500');
end if;
end;
insert into emp (empno,ename,job,mgr,hiredate,sal,comm,deptno) values(100,'asdg','assdsg',455,'11/23/1981',522,20,20);
select * from emp;














